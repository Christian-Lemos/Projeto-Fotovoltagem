extends layouts/layoutBase

block tituloPagina
    | Energia

block content
    h1 Energia
    .container
        
        .row
            .col-md-offset-1.col-md-10
                h3.text-danger.text-center#aviso-canvas
                canvas#canvas
        .row
            .col-md-offset-3.col-md-6.col-sm-12
                button.btn.btn-primary.btn-block#btn-reset-zoom-grafico Reiniciar Zoom
        br
        .row
            .col-md-offset-3.col-md-6.col-sm-12
                button.btn.btn-danger.btn-block#btn-excluir-dados-grafico Excluir dados
    .container-fluid
        h3 Paineis Solares
        .row
            .col-md-12
                .table-reponsive
                    table.table.table-bordered.table-striped
                        thead
                            tr
                                th Nome
                                th Tipo
                                th Host
                                th Caminho
                                th Acao
                        tbody#tbody-paineis
        
        h3 Adicionar Painel Solar
        .row
            .col-md-offset-3.col-md-6.col-sm-12
                form(onsubmit="return false", autocomplete="off")#form-adicionar-painel
                    .form-group
                        label(for="nome") Nome:
                        input(type="text", name="nome", placeholder = "Nome de sua preferência do painel solar", autocomplete="off", required).form-control
                    .form-group
                        label(for="host") Host:
                        input(type="text", name="host", placeholder = "Por exemplo: 200.132.36.179", autocomplete="off", required).form-control
                    .form-group
                        label(for="caminho") Caminho:
                        input(type="text", name="caminho", placeholder = "Por exemplo: solar_api/v1/GetInverterRealtimeData.cgi?Scope=Device&DeviceId=1&DataCollection=CommonInverterData", autocomplete="off", required).form-control
                    .form-group
                        label(for="tipo") Tipo:
                        select(name="tipo").form-control
                            if(modoDebug == true)
                                option(value="0") Debug
                            option(value="1") Fronius
                    .row
                        .col-md-offset-3.col-md-6.col-sm-12.text-center
                            button(type="submit").btn.btn-primary.btn-block Adicionar

    #modal-editar-painel.modal.fade(role='dialog')
        .modal-dialog
            .modal-content
                .modal-header
                    button.close(type='button', data-dismiss='modal') &times;             
                    h4.modal-title Editar painel solar         
                .modal-body
                    .row
                        .col-md-offset-1.col-md-10.col-sm-12
                            form(onsubmit="return false", autocomplete="off")#form-editar-painel
                                input(type="hidden", name="id")#editar-id
                                .form-group
                                    label(for="nome") Nome:
                                    input(type="text", name="nome", placeholder = "Nome de sua preferência do painel solar", autocomplete="off", required).form-control#editar-nome
                                .form-group
                                    label(for="host") Host:
                                    input(type="text", name="host", placeholder = "Por exemplo: 200.132.36.179", autocomplete="off", required).form-control#editar-host
                                .form-group
                                    label(for="caminho") Caminho:
                                    input(type="text", name="caminho", placeholder = "Por exemplo: solar_api/v1/GetInverterRealtimeData.cgi?Scope=Device&DeviceId=1&DataCollection=CommonInverterData", autocomplete="off", required).form-control#editar-caminho
                                .form-group
                                    label(for="tipo") Tipo:
                                    select(name="tipo").form-control#editar-nome
                                        if(modoDebug == true)
                                            option(value="0") Debug
                                        option(value="1") Fronius
                                button(type="submit").btn.btn-primary.btn-block Editar


        
    
            
block posScripts
    script(src="javascripts/moment.min.js")
    script(src="javascripts/chart.min.js")
     script(src="javascripts/hammer.min.js")
    script(src="javascripts/chartjs-plugin-zoom.min.js")
   
    script.
        var chart;
        function tipoToString(tipo)
        {
            tipo = Number(tipo);
            var tipoString;
            switch(tipo)
            {
                case 0:
                    tipoString = "Debug";
                    break;
                case 1:
                    tipoString = "Fronius";
                    break;
                default:
                    tipoString = "Desconhecido";
            }
            return tipoString;
        }

        function AtualizarTabelaPainel(data)
        {
            
            var linha = $("#tbody-paineis tr[data-id='"+data.id+"']");
            $(".lista-nome", linha).html(data.nome)
            $(".lista-caminho", linha).html(data.caminho)
            $(".lista-host", linha).html(data.host)
            $(".lista-tipo", linha).html(tipoToString(data.tipo))
            $(".lista-tipo", linha).data('tipo', data.tipo);
            $(".lista-tipo", linha).attr('data-tipo', data.tipo);
        }

        function AdicionarTabelaPainel(data)
        {
            var tipoString = tipoToString(data.tipo);
            var htmlString = '<tr data-id="'+data._id+'" class = "lista-id"><td class = "lista-nome">'+data.nome+'</td><td class = "lista-tipo" data-tipo="'+data.tipo+'">'+tipoString+'</td><td class = "lista-host">'+data.host+'</td><td class = "lista-caminho">'+data.path+'</td><td><button type = "button" class = "btn btn-primary btn-editar-painel" title = "Editar"><i class = "fa fa-edit"></i></button><button type = "button" class = "btn btn-danger btn-excluir-painel" title = "Excluir"><i class = "fa fa-times-circle"></i></button></td></tr>';
            $("#tbody-paineis").append(htmlString);
        }
        function RemoverTabelaPainel(id)
        {
           $("#tbody-paineis tr[data-id='"+id+"']").remove();
        }

        function RemoverPainelGrafico(id)
        {
            var i;
            var encontrado = false;
            for(i = 0; i < chart.data.datasets.length; i++)
            {
                if(chart.data.datasets[i]._id == id)
                {
                    encontrado = true;
                    break;
                }
                
            }
            if(encontrado)
            {
                chart.data.datasets.splice(i, 1);
            }
            
            chart.update();    
        }

        function AdicionarPainelGrafico(painel)
        {
            var cor = getRandomColor();
            chart.data.datasets.push({
                _id : painel._id,
                label: painel.nome,
                backgroundColor: cor,
                borderColor: cor,
                lineTension: 0,
                fill: false,
                                    
                data: []
            });
            chart.update();
        }

        function AtualizarNomePainelGrafico(painel)
        {
            for(var i = 0; i < chart.data.datasets.length; i++)
            {
                if(chart.data.datasets[i]._id == painel.id)
                {
                    chart.data.datasets[i].label = painel.nome;
                    chart.update(); 
                    return;
                }
                
            }
            
               
        }

        $("#form-adicionar-painel").on('submit', function()
        {
            var data = $(this).serialize();
            
            $.ajax({
                url : '/comandos/painel/adicionar',
                method : 'POST',
                data : data,
                dataType : 'JSON',
                success : function(resposta)
                {
                    GerarNotificacao(resposta.mensagem.conteudo, resposta.mensagem.tipo);
                    if(resposta.mensagem.tipo == 'success')
                    {
                        AdicionarTabelaPainel(resposta.painel);
                        socket.emit('add painel', resposta.painel);
                        AdicionarPainelGrafico(resposta.painel);
                    }
                    
                },
                error : function ()
                {
                    GerarNotificacao("Houve um erro na aplicação. Tente novamente mais tarde.", "danger");
                }
                
            });
        });
        $("#form-editar-painel").on('submit', function()
        {
            var dataArray = $(this).serializeArray();
            var data =  $.param(dataArray);
            var dataAssocArray  = {};
            for(var i = 0; i < dataArray.length; i++)
            {
                dataAssocArray[dataArray[i].name] = dataArray[i].value;
            }
            dataAssocArray['_id'] = dataAssocArray.id;
            $.ajax({
                url : '/comandos/painel/editar',
                method : 'POST',
                data : data,
                dataType : 'JSON',
                success : function(resposta)
                {
                    GerarNotificacao(resposta.mensagem.conteudo, resposta.mensagem.tipo);
                    if(resposta.mensagem.tipo == "success")
                    {
                        socket.emit('att painel', dataAssocArray);
                        AtualizarTabelaPainel(dataAssocArray);
                        AtualizarNomePainelGrafico(dataAssocArray);
                    }
                },
                error : function ()
                {
                    GerarNotificacao("Houve um erro na aplicação. Tente novamente mais tarde.", "danger");
                }
                
            });
        });
        function getRandomColor() {
            var letters = '0123456789ABCDEF'.split('');
            var color = '#';
            for (var i = 0; i < 6; i++ ) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        
        var color = Chart.helpers.color;
        var timeFormat = 'DD-MM-YYYY hh:mm:ss';
        var logSolar = JSON.parse('!{logSolar}');

        for(var i = 0; i < logSolar.length; i++)
        {
            AdicionarTabelaPainel(logSolar[i]);
        }
        $("#tbody-paineis").on('click', ".btn-excluir-painel",  function()
        {
            var linha = $(this).parent().parent();
            
            var enviarExcluir = function()
            {
                var codigo = linha.data('id');
                $.ajax({
                    url : '/comandos/painel/excluir',
                    method : 'POST',
                    data : {id : codigo},
                    dataType : 'JSON',
                    success : function(resposta)
                    {
                        GerarNotificacao(resposta.mensagem.conteudo, resposta.mensagem.tipo);
                        if(resposta.mensagem.tipo == "success")
                        {
                            linha.remove();
                            socket.emit('rem painel', codigo);
                            RemoverPainelGrafico(codigo);
                        }
                    },
                    error : function ()
                    {
                        GerarNotificacao("Houve um erro na aplicação.", "danger");
                    }   
                });
            };
            
            GerarConfirmacao("Tens certeza que queres excluir painel <i>"+linha.find("td").first().html()+"</i> ?", enviarExcluir);
           
        });
        $("#tbody-paineis").on('click', ".btn-editar-painel",  function()
        {
            var linha = $(this).parent().parent();
            var nome = $(".lista-nome", linha);
            var caminho = $(".lista-caminho", linha);
            var host = $(".lista-host", linha);
            var tipo = $(".lista-host", tipo);
            var formeditar = $("#form-editar-painel");

            $("#editar-id").val(linha.data("id"));
            $("#editar-nome").val(nome.html());
            $("#editar-caminho").val(caminho.html());
            $("#editar-host").val(tipo.html());
            $("#editar-tipo").val(linha.data("id"));
            
            $("#modal-editar-painel").modal('show');
        });
        var dataSets = new Array();
        for(var i = 0; i < logSolar.length; i++)
        {

            var thisdataset = new Array();
            for(var j = 0; j < logSolar[i].logs.length; j++)
            {
               var tempo = new Date(logSolar[i].logs[j].tempo);
                thisdataset.push({x : FormatarDate(tempo, "-"), y : logSolar[i].logs[j].valor});
            }
            var localTotalAgora = logSolar[i].logs[j - 1];
            var somaAgora = (typeof(localTotalAgora) != 'undefined') ? parseInt(localTotalAgora.valor) : 0;
            var cor = getRandomColor();
            dataSets.push({
                    _id : logSolar[i]._id,
                    label: logSolar[i].nome,
                    backgroundColor: cor,
                    borderColor: cor,
                    lineTension: 0,
                    fill: false,
                                        
                    data: thisdataset
                });
        }

        var config = {
            type: 'line',
            data: {             
                datasets: dataSets
            },
            options: {
                title: {
                    text: 'Chart.js Time Scale'
                },
                                
                scales: {
                    xAxes: [{
                        type: 'time',
                        time: {
                            parser: timeFormat,
                            tooltipFormat: 'll HH:mm'
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Horário'
                        }
                    }],
                    yAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Produção em W'
                        }
                    }]
                },
                pan: {
                    enabled: true,
                    mode: 'xy'
                },

                zoom: {
                    enabled: true,
                    mode: 'xy',
                }
            }
        };
        window.onload = function() {
            var ctx = document.getElementById('canvas').getContext('2d');
            chart = new Chart(ctx, config);
        };
        $("#btn-reset-zoom-grafico").on('click', function()
        {
            chart.resetZoom();
        });
        $("#btn-excluir-dados-grafico").on('click', function()
        {
            var excluir = function() 
            {
                $.ajax({
                url : '/comandos/painel/excluirlog',
                method : 'GET',
                dataType : 'JSON',
                success : function(resposta)
                {
                    GerarNotificacao(resposta.mensagem.conteudo, resposta.mensagem.tipo);

                    chart.data.datasets.forEach((dataset) =>
                    {
                        dataset.data = [];
                    });
                    chart.update();
                    
                },
                error : function (a)
                {
                    GerarNotificacao("Houve um erro na aplicação.", "danger");
                }   
                })
            }

            GerarConfirmacao("Tens certeza que desejas excluir todos os dados de produção de energia coletados?", excluir);
        });

        socket.on('att painel', function(mensagem)
        {
            AtualizarTabelaPainel(mensagem);
            AtualizarNomePainelGrafico(mensagem);
        });
        socket.on('add painel', function(mensagem)
        {
            AdicionarTabelaPainel(mensagem);
            AdicionarPainelGrafico(mensagem);
        });
        socket.on('rem painel', function(mensagem)
        {
            RemoverTabelaPainel(mensagem);
            RemoverPainelGrafico(mensagem);
        });
        socket.on('att grafico energia', function (mensagem)
        {
            mensagem = JSON.parse(mensagem);
            tempo = new Date(mensagem.tempo);
            chart.data.datasets.forEach((dataset) =>
            {
                if(dataset._id == mensagem.id)
                {
                    var data  = {x : FormatarDate(tempo, "-"), y : mensagem.valor };
                    dataset.data.push(data);
                }
                
            });
            chart.update();
        });
       